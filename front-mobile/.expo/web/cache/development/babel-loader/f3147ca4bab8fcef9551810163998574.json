{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput, TouchableOpacity } from \"react-native-gesture-handler\";\nimport { text, theme } from \"../core/styles\";\nimport eyesOpened from \"../core/assets/eyes-opened.png\";\nimport eyesClosed from \"../core/assets/eyes-closed.png\";\nimport arrow from \"../core/assets/arrow.png\";\nimport { makeLogin } from \"../services\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Login = function Login() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidePassword = _useState2[0],\n      setHidePassword = _useState2[1];\n\n  var _useState3 = useState({\n    username: '',\n    password: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userInfo = _useState4[0],\n      setUserInfo = _useState4[1];\n\n  var navigation = useNavigation();\n\n  var handleLogin = function handleLogin() {\n    return _regeneratorRuntime.async(function handleLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            makeLogin(userInfo);\n            navigation.navigate('Dashboard');\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(View, {\n    style: theme.container,\n    children: _jsxs(View, {\n      style: theme.loginCard,\n      children: [_jsx(Text, {\n        style: text.textLoginTitle,\n        children: \"Login\"\n      }), _jsxs(View, {\n        children: [_jsx(TextInput, {\n          value: userInfo.username,\n          onChangeText: function onChangeText(text) {\n            return setUserInfo(_objectSpread(_objectSpread({}, userInfo), {}, {\n              username: text\n            }));\n          },\n          placeholder: \"Email\",\n          autoCapitalize: \"none\",\n          keyboardType: \"email-address\",\n          style: theme.textInputLogin\n        }), _jsxs(View, {\n          style: theme.passwordGroup,\n          children: [_jsx(TextInput, {\n            placeholder: \"Senha\",\n            secureTextEntry: hidePassword,\n            value: userInfo.password,\n            onChangeText: function onChangeText(text) {\n              return setUserInfo(_objectSpread(_objectSpread({}, userInfo), {}, {\n                password: text\n              }));\n            },\n            autoCapitalize: \"none\"\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return setHidePassword(!hidePassword);\n            },\n            children: _jsx(Image, {\n              source: hidePassword ? eyesOpened : eyesClosed\n            })\n          })]\n        })]\n      }), _jsxs(TouchableOpacity, {\n        style: theme.primaryButton,\n        activeOpacity: 0.8,\n        onPress: function onPress() {\n          return handleLogin();\n        },\n        children: [_jsx(View, {\n          children: _jsx(Text, {\n            style: text.primaryText,\n            children: \"Fazer Login\"\n          })\n        }), _jsx(View, {\n          style: theme.arrowContainer,\n          children: _jsx(Image, {\n            source: arrow\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/Pedro/Desktop/Pasta com outras Pastas/Bootcamp/dscatalog/front-mobile/src/pages/Login.tsx"],"names":["React","useState","TextInput","TouchableOpacity","text","theme","eyesOpened","eyesClosed","arrow","makeLogin","useNavigation","Login","hidePassword","setHidePassword","username","password","userInfo","setUserInfo","navigation","handleLogin","navigate","container","loginCard","textLoginTitle","textInputLogin","passwordGroup","primaryButton","primaryText","arrowContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Image, Text, View, ViewPagerAndroidComponent } from \"react-native\";\r\nimport { TextInput, TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { text, theme } from \"../core/styles\";\r\n\r\nimport eyesOpened from '../core/assets/eyes-opened.png'\r\nimport eyesClosed from '../core/assets/eyes-closed.png'\r\nimport arrow from '../core/assets/arrow.png'\r\nimport { makeLogin } from \"../services\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\n\r\nconst Login: React.FC = () => {\r\n    const [hidePassword, setHidePassword] = useState(true)\r\n    const [userInfo, setUserInfo] = useState({\r\n        username: '',\r\n        password: ''\r\n    })\r\n    const navigation = useNavigation()\r\n\r\n    const handleLogin = async () => {\r\n       makeLogin(userInfo)\r\n       navigation.navigate('Dashboard')\r\n    }\r\n\r\n    return <View style={theme.container}>\r\n        <View style={theme.loginCard}>\r\n            <Text style={text.textLoginTitle}>Login</Text>\r\n            <View>\r\n                <TextInput value={userInfo.username} onChangeText={text => setUserInfo({ ... userInfo, username: text })} placeholder=\"Email\" autoCapitalize=\"none\" keyboardType=\"email-address\" style={theme.textInputLogin}/>\r\n                <View style={theme.passwordGroup}>\r\n                    <TextInput placeholder=\"Senha\" secureTextEntry={hidePassword} value={userInfo.password} onChangeText={text => setUserInfo({ ... userInfo, password: text })} autoCapitalize=\"none\"/>\r\n                    <TouchableOpacity onPress={() => setHidePassword(!hidePassword)}>\r\n                        <Image source={hidePassword ?  eyesOpened : eyesClosed}/>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n            <TouchableOpacity style={theme.primaryButton} activeOpacity={0.8} onPress={() => handleLogin()}>\r\n                <View>\r\n                    <Text style={text.primaryText}>Fazer Login</Text>\r\n                </View>\r\n                <View style={theme.arrowContainer}>\r\n                    <Image source={arrow}/>\r\n                </View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    </View>\r\n\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}