{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport React, { useEffect, useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { doLogout, isAuthenticated } from \"../../services\";\nimport drawer from \"../assets/menu.png\";\nimport { nav, text } from \"../styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar Navbar = function Navbar() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      authenticated = _useState4[0],\n      setAuthenticated = _useState4[1];\n\n  var navigation = useNavigation();\n  var route = useRoute();\n\n  var handleNavigate = function handleNavigate(path) {\n    if (path) {\n      setShow(false);\n      navigation.navigate(path);\n    }\n\n    setShow(false);\n  };\n\n  var isLogged = function isLogged() {\n    var bool;\n    return _regeneratorRuntime.async(function isLogged$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(isAuthenticated());\n\n          case 2:\n            bool = _context.sent;\n\n            if (bool) {\n              setAuthenticated(true);\n            } else {\n              setAuthenticated(false);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    isLogged();\n  }, []);\n  return _jsx(_Fragment, {\n    children: authenticated ? _jsx(TouchableOpacity, {\n      style: nav.logout,\n      onPress: function onPress() {\n        doLogout();\n        navigation.navigate('Login');\n      },\n      children: _jsx(Text, {\n        style: text.textLogout,\n        children: \" SAIR\"\n      })\n    }) : _jsxs(TouchableOpacity, {\n      activeOpacity: 0.8,\n      onPress: function onPress() {\n        return setShow(!show);\n      },\n      children: [_jsx(Image, {\n        source: drawer,\n        style: nav.drawer\n      }), show ? _jsxs(View, {\n        style: nav.options,\n        children: [_jsx(TouchableOpacity, {\n          style: nav.option,\n          onPress: function onPress() {\n            return handleNavigate('Home');\n          },\n          children: _jsx(Text, {\n            style: [nav.textOption, route.name === \"Home\" ? nav.active : null],\n            children: \"Home\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: nav.option,\n          onPress: function onPress() {\n            return handleNavigate('Catalog');\n          },\n          children: _jsx(Text, {\n            style: [nav.textOption, route.name === \"Catalog\" ? nav.active : null],\n            children: \"Cat\\xE1logo\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: nav.option,\n          onPress: function onPress() {\n            return handleNavigate('Dashboard');\n          },\n          children: _jsx(Text, {\n            style: [nav.textOption, route.name === \"Dashboard\" ? nav.active : null],\n            children: \"Dashboard\"\n          })\n        }), _jsx(TouchableOpacity, {\n          style: nav.option,\n          onPress: function onPress() {\n            return handleNavigate('Login');\n          },\n          children: _jsx(Text, {\n            style: [nav.textOption, route.name === \"Login\" ? nav.active : null],\n            children: \"Login\"\n          })\n        })]\n      }) : null]\n    })\n  });\n};\n\nexport default Navbar;","map":{"version":3,"sources":["C:/Users/Pedro/Desktop/Pasta com outras Pastas/Bootcamp/dscatalog/front-mobile/src/core/components/Navbar.tsx"],"names":["useNavigation","useRoute","React","useEffect","useState","TouchableOpacity","doLogout","isAuthenticated","drawer","nav","text","Navbar","show","setShow","authenticated","setAuthenticated","navigation","route","handleNavigate","path","navigate","isLogged","bool","logout","textLogout","options","option","textOption","name","active"],"mappings":"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","sourcesContent":["import { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Image, Text, View } from \"react-native\";\r\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\r\nimport { doLogout, isAuthenticated } from \"../../services\";\r\nimport drawer from '../assets/menu.png'\r\nimport { nav, text } from \"../styles\";\r\n\r\n\r\nconst Navbar: React.FC = () => {\r\n    const [show, setShow] = useState(false)\r\n    const [authenticated, setAuthenticated] = useState(false)\r\n    const navigation = useNavigation()\r\n    const route = useRoute()\r\n\r\n    const handleNavigate = (path: any) => {\r\n        if(path) {\r\n            setShow(false)\r\n            navigation.navigate(path)\r\n        }\r\n\r\n        setShow(false)\r\n    }\r\n\r\n    const isLogged = async () => {\r\n        const bool = await isAuthenticated()\r\n        if(bool){\r\n            setAuthenticated(true)\r\n        } else {\r\n            setAuthenticated(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        isLogged()\r\n    },[])\r\n\r\n    return <>\r\n        {authenticated ? <TouchableOpacity style={nav.logout} onPress={() => { doLogout(); navigation.navigate('Login') }}>\r\n            <Text style={text.textLogout}> SAIR</Text>\r\n            </TouchableOpacity> : (<TouchableOpacity activeOpacity={0.8} onPress={() => setShow(!show)}>\r\n        <Image source={drawer} style={nav.drawer} />\r\n        {\r\n            show ? (<View style={nav.options}>\r\n                <TouchableOpacity style={nav.option} onPress={() => handleNavigate('Home')} >\r\n                    <Text style={[nav.textOption, route.name === \"Home\" ? nav.active : null]}>Home</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={nav.option} onPress={() => handleNavigate('Catalog')}>\r\n                    <Text style={[nav.textOption, route.name === \"Catalog\" ? nav.active : null]}>Cat√°logo</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={nav.option} onPress={() => handleNavigate('Dashboard')}>\r\n                    <Text style={[nav.textOption, route.name === \"Dashboard\" ? nav.active : null]}>Dashboard</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={nav.option} onPress={() => handleNavigate('Login')}>\r\n                    <Text style={[nav.textOption, route.name === \"Login\" ? nav.active : null]}>Login</Text>\r\n                </TouchableOpacity>\r\n            </View>) : null\r\n        }\r\n    </TouchableOpacity>)}\r\n    </>\r\n}\r\n\r\nexport default Navbar;"]},"metadata":{},"sourceType":"module"}