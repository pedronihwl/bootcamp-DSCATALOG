{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { ProductCard, SearchInput } from \"../core/components\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { theme } from \"../core/styles\";\nimport { getApi } from \"../services\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Catalog = function Catalog() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      products = _useState4[0],\n      setProducts = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var getProducts = function getProducts() {\n    var res;\n    return _regeneratorRuntime.async(function getProducts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getApi.get('/products?size=6'));\n\n          case 3:\n            res = _context.sent;\n            setIsLoading(false);\n            setProducts(res.data.content);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getProducts();\n  }, []);\n  var data = search.length > 0 ? products.filter(function (p) {\n    return p.name.toLowerCase().includes(search.toLowerCase());\n  }) : products;\n  return _jsxs(ScrollView, {\n    contentContainerStyle: theme.scrollContainer,\n    children: [_jsx(SearchInput, {\n      placeholder: \"Insira um nome\",\n      search: search,\n      setSearch: setSearch\n    }), isLoading ? _jsx(ActivityIndicator, {\n      size: \"large\"\n    }) : data.map(function (product) {\n      return _createElement(ProductCard, _objectSpread(_objectSpread({}, product), {}, {\n        key: product.id\n      }));\n    })]\n  });\n};\n\nexport default Catalog;","map":{"version":3,"sources":["C:/Users/Pedro/Desktop/Pasta com outras Pastas/Bootcamp/dscatalog/front-mobile/src/pages/Catalog.tsx"],"names":["React","useState","useEffect","ProductCard","SearchInput","ScrollView","theme","getApi","Catalog","search","setSearch","products","setProducts","isLoading","setIsLoading","getProducts","get","res","data","content","length","filter","p","name","toLowerCase","includes","scrollContainer","map","product","id"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SAASC,WAAT,EAAsBC,WAAtB;AAEA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,KAAT;AACA,SAASC,MAAT;;;;;AAEA,IAAMC,OAAiB,GAAG,SAApBA,OAAoB,GAAM;AAC5B,kBAA4BP,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOQ,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAgCT,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAkCX,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AAED,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBD,YAAAA,YAAY,CAAC,IAAD,CAAZ;AADgB;AAAA,6CAEEP,MAAM,CAACS,GAAP,CAAW,kBAAX,CAFF;;AAAA;AAEVC,YAAAA,GAFU;AAGhBH,YAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,YAAAA,WAAW,CAACK,GAAG,CAACC,IAAJ,CAASC,OAAV,CAAX;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAOCjB,EAAAA,SAAS,CAAC,YAAM;AACZa,IAAAA,WAAW;AAEd,GAHQ,EAGP,EAHO,CAAT;AAKA,MAAMG,IAAI,GAAGT,MAAM,CAACW,MAAP,GAAgB,CAAhB,GAAoBT,QAAQ,CAACU,MAAT,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,CAAOC,WAAP,GAAqBC,QAArB,CAA8BhB,MAAM,CAACe,WAAP,EAA9B,CAAJ;AAAA,GAAjB,CAApB,GAAgGb,QAA7G;AAEA,SAAQ,MAAC,UAAD;AAAY,IAAA,qBAAqB,EAAEL,KAAK,CAACoB,eAAzC;AAAA,eACJ,KAAC,WAAD;AAAa,MAAA,WAAW,EAAC,gBAAzB;AAA0C,MAAA,MAAM,EAAEjB,MAAlD;AAA0D,MAAA,SAAS,EAAEC;AAArE,MADI,EAEHG,SAAS,GAAG,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB,MAAH,GACNK,IAAI,CAACS,GAAL,CAAS,UAAAC,OAAO;AAAA,aACZ,eAAC,WAAD,kCAAkBA,OAAlB;AAA2B,QAAA,GAAG,EAAEA,OAAO,CAACC;AAAxC,SADY;AAAA,KAAhB,CAHA;AAAA,IAAR;AAQH,CA3BD;;AA6BA,eAAerB,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, ActivityIndicator } from 'react-native';\r\nimport { ProductCard, SearchInput } from '../core/components';\r\nimport productImg from '../core/assets/product.png'\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport { theme } from '../core/styles';\r\nimport { getApi } from '../services';\r\n\r\nconst Catalog: React.FC = () => {\r\n    const [search, setSearch] = useState('')\r\n    const [products, setProducts] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n   const getProducts = async () => {\r\n       setIsLoading(true)\r\n       const res = await getApi.get('/products?size=6')\r\n       setIsLoading(false)\r\n       setProducts(res.data.content)\r\n   }\r\n\r\n    useEffect(() => {\r\n        getProducts()\r\n\r\n    },[])\r\n\r\n    const data = search.length > 0 ? products.filter(p => p.name.toLowerCase().includes(search.toLowerCase())) : products\r\n\r\n    return (<ScrollView contentContainerStyle={theme.scrollContainer}>\r\n        <SearchInput placeholder=\"Insira um nome\" search={search} setSearch={setSearch}/>\r\n        {isLoading ? <ActivityIndicator size=\"large\"/> :\r\n            data.map(product => (\r\n                <ProductCard {... product} key={product.id}/>\r\n            ))\r\n        }\r\n    </ScrollView>)\r\n}\r\n\r\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}